Write down some notes for internal implementations.

* Handler Lifecycle
** What is Handler

In erlang code, Handler (a handle term) is a REF to the contexts and they are

- Listener handler

  For accessing l_ctx (Listener Context)

- Connection handler

  For accessing c_ctx (Connection Context)

- Stream handler

  For accessing s_ctx (Stream Context)

`*_ctx` is the NIF resource object in C code, and it has

1. A MsQuic handler (HQUIC) for interworking with MsQuic.
2. A 'is_closed' boolean flag mark if the HQUIC is valid or not.
   If it is false, the HQUIC may become (or is becoming) invalid and it is unsafe to be used for calling MsQuic APIs.
3. ... Other members(fields) are irrelevant here.

** Creation

Creation is the op of allocating NIF resources.

*** Listener handler

Created in quicer_nif:listen/2

*** Connection handler

In init_c_ctx

1. server: ctx is created in listener callback when there is new incoming connection
2. client: ctx is created in quicer_nif:async_connect3/3

*** Stream handler

In init_s_ctx

1. server: ctx is created in conn callback
2. client: ctx is created in quicer_nif:async_start_stream2/2

** Destroy

In erlang vm, if there is a var holding the handler, it will not be garbage collected.

Same as in C NIF code, if the handler is one of the input arguments, it is safe to access the *_ctx because the var in erlang is still holding the handler but we cannot assume the API caller will hold the handler for the entire lifecycle.

** Thread Safety with ref counting.

In C code, the resource object is not deallocated (become *invalid**) until the last handle term is garbage collected by the VM and the resource is released with enif_release_resource (not necessarily in that order).

Access a *invalid* resource object via the pointer could cause SEGFAULT.

In term of thread safety, There are three players in quicer that could access the resource object simultaneously.

a. The MsQuic worker thread is accessing *_ctx in the callback function
b. VM scheduler is executing a NIF function such as quicer:send/2
c. VM scheduler thread is doing GC of the handler object

For safety, we need to ref count the usage by calling a pair of function: enif_keep_resource and enif_release_resource.

note, The refcounting is very expensive call.

1. Ensure the c) happens last.

2. In the nif function that needs to access the resource object:

   +call enif_keep_resource before the access+

   +call enif_release_resource after the access+

   At the time of accessing resource object, the Var is still refereced and it will not be garbage collected.

   It is unnecessary to keep/release the resources.

   Note @TODO, unsure this is still true for the NIF that runs on dirty scheduler.

3. In the nif function that calls the MsQuic API which can cause later accessing resource object in the callback context in the msquic worker thread:

   After checking that the resource is not in the closing/closed state with mutex lock.
   call enif_keep_resource before calling the MsQuic API

   In MsQuic callback function, call enif_release_resource when the async task is done.

4. In MsQuic callback function when the corresponding handler(HQUIC) of MsQuic will be closed.

   call enif_release_resource

   also, ensure the is_closed is set to *TRUE* with mutex lock.

   This prevents others to access the closing/closed HQUIC that could cause runtime error in msquic.

5. In MsQuic callback function and NIF function

   When the high-level resource object is created on top of a lower level.

   For example: when a stream is created in a connection, we need to call enif_keep_resource for connection resource object bump the refcnt.

6. Deinit the resource object in resource destruct function ~resource_*_dealloc_callback~

   Call enif_release_resource for corresponding lower-level resource object.

   For instance, when deinit the s_ctx, it should deref the c_ctx.

   Everything contained in the resource object becomes invalid and it will be impossible to access the destructed
   resource obj from a) and b). But for accessing from c) it is out of our control.

7. When shutdown the connection via quicer_nif:close_connection3

   Mark ctx.is_closed = True if it is unset.

8. Close msquic handler (HQUIC) only in msquic callback handler function, never do it in NIF ctx

   Close the msquic handler when shutdown_complete event is received.

9. @TODO: MsQuic callback signaling

   This needs to be double-checked, we need to add a new test case for it, if callback fun could signal the resource owner to let it access the c_ctx?

   We need put some assertions:

   1. Callback won't get called for a closed HQUIC.
   2. enif_make_resource should return the same object if already presents.

   If so, GC will be a problem because the receiver could die and not be able to dec the refcnt.

10. @TODO: Catch runtime error signals from msquic
    To not 'crash' the erlang VM. we need some signal handling to handle the runtime error signals from msquic such as runtime assertions and raise an alarm for 'need maintaince'.

    If the resource that links to the error is identical, we could try to mark it blacklisted and deny further access.
